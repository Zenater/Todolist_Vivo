{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","navigate","useNavigate","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","rootReducer","combineReducers","app","store","configureStore","middleware","MiddlewareArray","concat","thunkMiddleware","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a735b215.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b44d5908-4878-4d01-9080-23212659f3c2'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{ userId: number}>>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponceType>>(`/auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n}\r\n\r\n// types\r\nexport type MeResponceType = {\r\n    id: number\r\n    email:string\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type LoginParamsType= {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC} = slice.actions\r\nexport const {setAppStatusAC} = slice.actions\r\nexport const {setAppInitializedAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}));\r\n    })\r\n}\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC({id, title}))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC,} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC,} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList= () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const navigate=useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch( fetchTodolistsTC());\r\n        } else {\r\n            navigate('login')\r\n        }\r\n    }, [isLoggedIn,dispatch,navigate])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (filter: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC({id:todolistId, filter}))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {configureStore, MiddlewareArray} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\nexport const store = configureStore({reducer:rootReducer, middleware: new MiddlewareArray().concat(thunkMiddleware)});\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// кастомный хук\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error:null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\n\r\nexport const Login = () => {\r\n    const dispatch=useDispatch()\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n             const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length<3) {\r\n                errors.password = 'password shout be > 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                <FormGroup>\r\n                    <TextField margin=\"normal\"\r\n                                label=\"Email\"\r\n                               // onChange={formik.handleChange}\r\n                               // value={formik.values.email}\r\n                               // onBlur={formik.handleBlur}\r\n                               {...formik.getFieldProps('email')}\r\n\r\n                    />\r\n                    {formik.errors.email && formik.touched.email &&\r\n                    <div style={{color:\"red\"}}>{formik.errors.email}</div>}\r\n                    <TextField type=\"password\" label=\"Password\"\r\n                               margin=\"normal\"\r\n                               {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password && formik.touched.email &&\r\n                    <div style={{color:\"red\"}}>{formik.errors.password}</div>}\r\n\r\n                    <FormControlLabel label={'Remember me'} control=\r\n                        {<Checkbox\r\n                             checked={formik.values.rememberMe}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n </Grid>\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status=useAppSelector(state=>state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n            dispatch( initializeAppTC());\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {/*<Typography variant=\"h6\">*/}\r\n                    {/*    News*/}\r\n                    {/*</Typography>*/}\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                    <Route path='/404' element={<h1 style={{textAlign:'center'}}>404 not found</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}