{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","setAppErrorAC","messages","length","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","setAppIsInitializedAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","clearTodosDataAC","fetchTodolistsTC","todolists","todos","forEach","tl","setTasksAC","items","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","addTask","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","navigate","useNavigate","useDispatch","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","rootReducer","combineReducers","todoListId","copyState","app","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1d81c39.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '99afe1ff-4ef2-46aa-b669-01f70d9fc47e'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{ userId: number}>>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponceType>>(`/auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n}\r\n\r\n// types\r\nexport type MeResponceType = {\r\n    id: number\r\n    email:string\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type LoginParamsType= {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppActionType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setAppErrorAC(data.messages.length ? data.messages[0] : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionType>,message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppIsInitializedAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodosDataAC} from \"../TodolistsList/todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch,error )\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(clearTodosDataAC()) //clear asinc\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch,error )\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n    | ReturnType<typeof clearTodosDataAC>","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n//status===loading - see\r\n//status===| 'succeeded' | 'failed''idle' | no see\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch,error )\r\n        })\r\n        .finally(()=> {\r\n            dispatch(setAppIsInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport type AppActionType =\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n","import {\r\n    AddTodolistActionType,\r\n    clearTodosDataAC,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {setAppErrorAC, setAppIsInitializedAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {setIsLoggedInAC} from \"../Login/auth-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK', model, todolistId, taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS', tasks, todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC( res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(dispatch, error);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type _TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksStateType = Record<string, TaskType[]>\r\n\r\n//Record<string,TaskType[]> type key,type values\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppErrorAC, setAppIsInitializedAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {setIsLoggedInAC} from \"../Login/auth-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CLEAR-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return res.data\r\n            })\r\n            .then((todos)=> {\r\n                todos.forEach((tl)=> {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n    }\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodosDataAC>\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n    // useEffect(() => {\r\n    //     if (demo) {\r\n    //         return\r\n    //     }\r\n    //     const thunk = fetchTasksTC(props.todolist.id)\r\n    //     dispatch(thunk)\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList= () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const navigate=useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch( fetchTodolistsTC());\r\n        } else {\r\n            navigate('login')\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    // if(!isLoggedIn) {\r\n    //     return <Navigate to={'login'}/>\r\n    // }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// кастомный хук\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\n\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\n// Partial делае все поля необязательными\r\n// Omit убирает одном поле, перечисление через |\r\n// Pick добовляет  поле, перечисление через | .  const errors: Partial<Pick<LoginParamsType, 'email'| 'password' |'rememberMe'>> = {};\r\nexport const Login = () => {\r\n    const dispatch=useDispatch()\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            // const errors: FormikErrorType = {};\r\n             const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length<3) {\r\n                errors.password = 'password shout be > 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                <FormGroup>\r\n                    <TextField margin=\"normal\"\r\n                                label=\"Email\"\r\n                               // onChange={formik.handleChange}\r\n                               // value={formik.values.email}\r\n                               // onBlur={formik.handleBlur}\r\n                               {...formik.getFieldProps('email')}\r\n\r\n                    />\r\n                    {formik.errors.email && formik.touched.email &&\r\n                    <div style={{color:\"red\"}}>{formik.errors.email}</div>}\r\n                    <TextField type=\"password\" label=\"Password\"\r\n                               margin=\"normal\"\r\n                               {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.errors.password && formik.touched.email &&\r\n                    <div style={{color:\"red\"}}>{formik.errors.password}</div>}\r\n\r\n                    <FormControlLabel label={'Remember me'} control=\r\n                        {<Checkbox\r\n                             checked={formik.values.rememberMe}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            />}/>\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n </Grid>\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status=useAppSelector(state=>state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n            dispatch( initializeAppTC());\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n                    <Route path='/404' element={<h1 style={{textAlign:'center'}}>404 not found</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}